{"version":3,"sources":["components/card/card.component.jsx","components/card_list/card_list.component.jsx","components/search_box/search_box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","champ","className","name","title","newT","split","toUpperCase","join","toUpperTitle","Array","info","difficulty","keys","filter","r","map","alt","src","image","full","tags","blurb","attack","magic","defense","CardList","champs","key","id","SearchBox","placeholder","handleChange","type","onChange","e","target","value","App","setSearch","setState","search","getFilteredChamps","state","toLowerCase","includes","fetch","then","json","this","Object","values","data","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mVAGaA,G,MAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChB,yBAAKC,UAAU,QACX,yBAAKA,UAAU,QACVD,EAAME,KADX,MA6BR,SAAsBC,GAElB,IAAMC,EAAOD,EAAME,MAAM,IAIzB,OAFAD,EAAK,GAAKA,EAAK,GAAGE,cAEXF,EAAKG,KAAK,IAlCOC,CAAaR,EAAMG,QAEvC,yBAAKF,UAAU,SAEP,YAAIQ,MAAMT,EAAMU,KAAKC,YAAYC,QAC5BC,QAAO,SAAAC,GAAC,OAAU,IAANA,KACZC,KAAI,SAAAD,GAAC,mBAGlB,yBAAKb,UAAU,SACX,yBAAKe,IAAI,QACLC,IAAG,sEAAiEjB,EAAMkB,MAAMC,SAExF,yBAAKlB,UAAU,eACX,4BACKD,EAAMoB,KAAK,GADhB,IACqBpB,EAAMoB,KAAK,IAEhC,2BACKpB,EAAMqB,OAGX,yBAAKpB,UAAU,SAAf,MACQD,EAAMU,KAAKY,OADnB,YACsCtB,EAAMU,KAAKa,MADjD,aACoEvB,EAAMU,KAAKc,a,UCxB9EC,EAAW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIvB,OAAO,yBAAKzB,UAAU,aAFKyB,EAAOX,KAAI,SAAAD,GAAC,OAAI,kBAAC,EAAD,CAAMa,IAAKb,EAAEc,GAAI5B,MAAOc,SCH1De,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,yBAAK9B,UAAU,eACX,2BAAQA,UAAU,SACV+B,KAAK,SACLF,YAAcA,EACdG,SAAU,SAAAC,GAAC,OAAIH,EAAaG,EAAEC,OAAOC,aCiCtCC,E,kDAlCb,aAAc,IAAD,8BACX,gBAcFC,UAAY,SAAAF,GAAK,OAAI,EAAKG,SAAS,CAAEC,OAAQJ,KAfhC,EAiBbK,kBAAoB,kBAAM,EAAKC,MAAMhB,OAAOb,QAAO,SAAAC,GAAC,OAAIA,EAAEZ,KAAKyC,cACnBC,SAAS,EAAKF,MAAMF,OAAOG,mBAfrE,EAAKD,MAAQ,CACXhB,OAAQ,GACRc,OAAQ,IALC,E,gMAUUK,MAdR,2EAcwBC,MAAK,SAAAhC,GAAC,OAAIA,EAAEiC,U,OAA3CrB,E,OAENsB,KAAKT,SAAS,CAACb,OAAQuB,OAAOC,OAAOxB,EAAOyB,Q,qIAU5C,OACE,yBAAKlD,UAAU,OACX,yBAAKA,UAAU,SACb,0CAEF,kBAAC,EAAD,CAAW6B,YAAY,oBAAiBC,aAAciB,KAAKV,YAC3D,kBAAC,EAAD,CAAUZ,OAAQsB,KAAKP,2B,GA9BfW,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e544f8e1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.sass'\r\n\r\nexport const Card = ({ champ }) => (\r\n    <div className=\"card\">\r\n        <div className=\"name\">\r\n            {champ.name} - {toUpperTitle(champ.title)}\r\n        </div>\r\n        <div className=\"level\">\r\n            {\r\n                [...Array(champ.info.difficulty).keys()]\r\n                    .filter(r => r !== 0)\r\n                    .map(r => `⭐`)\r\n            }\r\n        </div>\r\n        <div className=\"image\">\r\n            <img alt=\"champ\" \r\n                src={`http://ddragon.leagueoflegends.com/cdn/10.16.1/img/champion/${champ.image.full}`}/>\r\n        </div>\r\n        <div className=\"description\">\r\n            <h2>\r\n                {champ.tags[0]}/{champ.tags[1]}\r\n            </h2>\r\n            <p>\r\n                {champ.blurb}\r\n            </p>\r\n            \r\n            <div className=\"stats\">\r\n                AD/{champ.info.attack} &nbsp; AP/{champ.info.magic} &nbsp; DEF/{champ.info.defense}  \r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nfunction toUpperTitle(title){\r\n\r\n    const newT = title.split('')\r\n\r\n    newT[0] = newT[0].toUpperCase()\r\n\r\n    return newT.join('')\r\n}","import React from 'react'\r\nimport { Card } from '../card/card.component'\r\nimport './card_list.styles.sass'\r\n\r\nexport const CardList = ({ champs }) => {\r\n\r\n    const displayNames = () => champs.map(r => <Card key={r.id} champ={r}/>)\r\n\r\n    return <div className=\"card-list\">{ displayNames() }</div>\r\n} ","import React from 'react'\r\nimport './search_box.styles.sass'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <div className=\"dflexCenter\">\r\n        <input  className=\"search\" \r\n                type=\"search\" \r\n                placeholder={ placeholder } \r\n                onChange={e => handleChange(e.target.value)}/>\r\n    </div>\r\n)","import React, { Component } from 'react'\nimport { CardList } from './components/card_list/card_list.component'\nimport { SearchBox } from './components/search_box/search_box.component'\nconst champUrl = 'http://ddragon.leagueoflegends.com/cdn/10.16.1/data/es_MX/champion.json'\n\nclass App extends Component{\n\n  constructor(){\n    super()\n    \n    this.state = { \n      champs: [],\n      search: ''\n    }\n  }\n\n  async componentDidMount(){\n    const champs = await fetch(champUrl).then(r => r.json())\n\n    this.setState({champs: Object.values(champs.data)})\n  }\n\n  setSearch = value => this.setState({ search: value })\n\n  getFilteredChamps = () => this.state.champs.filter(r => r.name.toLowerCase()\n                                             .includes(this.state.search.toLowerCase()))\n\n  render() {\n\n    return (\n      <div className=\"App\">\n          <div className=\"title\">\n            <h1>LOL-Cards</h1>\n          </div>\n          <SearchBox placeholder=\"Buscar campeón\" handleChange={this.setSearch}/>\n          <CardList champs={this.getFilteredChamps()}/>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}